from aiogram import types
from aiogram.dispatcher.filters.builtin import CommandStart
from keyboards import *
from aiogram.dispatcher.storage import FSMContext
from loader import dp, bot, users_con
from filters import *
from aiogram.dispatcher.filters.state import StatesGroup, State
from data.config import ADMINS
from states.states import Admin

async def _user(_id, mention=None):
    user = users_con.user(_id, mention)
    return user

#–°–¢–ê–†–¢
@dp.message_handler(text='‚¨Ö', state='*')
@dp.message_handler(CommandStart(), IsPrivate(), state='*')
async def bot_start(message: types.Message):
    chat = await bot.get_chat(message.from_user.id)
    mention = chat.mention
    text = f"""
    –ú–µ–Ω—é
    """
    if '@' in mention:
        await _user(message.from_user.id, mention)
    else:
        await _user(message.from_user.id)
        text = text + '\n\n –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–µ–±–µ –Ω–∏–∫–Ω–µ–π–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏ —Å–Ω–æ–≤–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start'
    await message.answer(text, reply_markup=MainKbs.MenuMarkup)


@dp.callback_query_handler(text='GoMenu', state='*')
async def bot_start(call: types.CallbackQuery, state: FSMContext):
    try: await bot.delete_message(call.from_user.id, call.message.message_id)
    except: pass
    await state.finish()
    await call.message.answer(f"–ú–µ–Ω—é", reply_markup=MainKbs.MenuMarkup)
    chat = await bot.get_chat(call.from_user.id)
    mention = chat.mention
    if '@' in mention:
        await _user(call.from_user.id, mention=mention)
    else:
        await _user(call.from_user.id)

#–ü–†–û–§–ò–õ–¨
@dp.message_handler(IsPrivate(), text='üíÅ‚Äç‚ôÇ –ü—Ä–æ—Ñ–∏–ª—å', state='*')
async def profile(message: types.Message, state: FSMContext):
    await state.finish()
    user = await _user(message.from_user.id)
    chat = await bot.get_chat(message.from_user.id)
    rating = user[2]
    verif = user[3]
    if rating == 0:
        rating = '–í—ã –µ—â—ë –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–∏'
    text = f"""
üÜî <b>–í–∞—à id: </b>{message.from_user.id}

üí∞ <b>–ë–∞–ª–∞–Ω—Å: </b>{str(user[5])}RUB
üí≥ <b>–°—É–º–º–∞ —Å–¥–µ–ª–æ–∫: </b>{user[4]} RUB

‚úÖ <b>–°—Ç–∞—Ç—É—Å: </b>{verif}
üìä <b>–†–µ–π—Ç–∏–Ω–≥: </b>{rating}
"""
    await message.answer(text, reply_markup=(await MainKbs.CheckVerif(message.from_user.id)))

#–ü–†–û–§–ò–õ–¨
@dp.callback_query_handler(text='GoBackProfile', state='*')
async def profile(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    user = await _user(call.from_user.id)
    chat = await bot.get_chat(call.from_user.id)
    rating = user[2]
    verif = user[3]
    if verif == '–ù–µ–≤–µ—Ä–∏—Ñ–∏—Ü—Ä–æ–≤–∞–Ω–Ω—ã–π':
        verif = verif + ' <a href="https://google.com">(–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è)</a>'
    if rating == 0:
        rating = '–í—ã –µ—â—ë –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–∏'
    text = f"""
üÜî <b>–í–∞—à id: </b>{call.from_user.id}

üí∞ <b>–ë–∞–ª–∞–Ω—Å: </b>{str(user[5])}RUB
üí≥ <b>–°—É–º–º–∞ —Å–¥–µ–ª–æ–∫: </b>{user[4]} RUB

‚úÖ <b>–°—Ç–∞—Ç—É—Å: </b>{verif}
üìä <b>–†–µ–π—Ç–∏–Ω–≥: </b>{rating}
    """
    await call.message.answer(text, reply_markup=MainKbs.ProfileMarkup)

#–ò–ù–§–û–†–ú–ê–¶–ò–Ø
@dp.message_handler(IsPrivate(), text='‚Ñπ –ò–Ω—Ñ–æ', state='*')
async def send_info(message: types.Message, state: FSMContext):
    await state.finish()
    text = f"""
–° –ø–æ–º–æ—â—å—é –¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç—ã, –ø—Ä–æ–∫—Å–∏, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!

ü§ê <b>–ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–Ω–æ</b>
–ú—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º –ª–æ–≥–∏ –∏ –ø—Ä–æ—á—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
üí∏ <b>–ù–∏–∑–∫–∞—è –∫–æ–º–∏—Å—Å–∏—è</b>
–í —Ä–∞–∑—ã –Ω–∏–∂–µ, —á–µ–º —É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤.
‚è∞ <b>–û—á–µ–Ω—å —É–¥–æ–±–Ω–æ</b>
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–æ–∫, –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤.
üéü <b>–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Å–∫–∏–¥–∫–∏</b>
–°–∫–∏–¥–∫–∏, —Ä–æ–∑—ã–≥—Ä—ã—à–∏, —Ä–∞–∑–¥–∞—á–∏ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é.
‚òé <b>–û—Ç–∑—ã–≤—á–∏–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>
–ë—ã—Å—Ç—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å–ø–æ—Ä–æ–≤, –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤.
ü§ñ <b>–ù–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ</b>
–í –±–æ—Ç–µ –Ω–µ—Ç –Ω–∏—á–µ–≥–æ, —á—Ç–æ –º–æ–∂–µ—Ç –ø–æ–º–µ—à–∞—Ç—å –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.
    """
    await message.answer(text, reply_markup=MainKbs.InfoMarkup)


@dp.message_handler(commands='verif')
async def take_verif(message: types.Message, state: FSMContext):
    if message.from_user.id in ADMINS:
        await message.answer('–ê–π–¥–∏ —é–∑–µ—Ä–∞:')
        await Admin.id.set()

@dp.message_handler(state=Admin.id)
async def set_verif(message: types.Message, state: FSMContext):
    users_con.take_verif(message.text)






