from aiogram import types
from aiogram.dispatcher.filters.builtin import CommandStart
from keyboards import *
from aiogram.dispatcher.storage import FSMContext
from loader import dp, bot, users_con
from filters import *
from aiogram.dispatcher.filters.state import StatesGroup, State

async def _user(_id, mention=None):
    user = users_con.user(_id, mention)
    return user

#–°–¢–ê–†–¢
@dp.message_handler(text='–ù–∞–∑–∞–¥ üîô', state='*')
@dp.message_handler(CommandStart(), IsPrivate(), state='*')
async def bot_start(message: types.Message):
    chat = await bot.get_chat(message.from_user.id)
    mention = chat.mention
    text = f"""
    –ú–µ–Ω—é
    """
    if '@' in mention:
        await _user(message.from_user.id, mention)
    else:
        await _user(message.from_user.id)
        text = text + '\n\n –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–µ–±–µ –Ω–∏–∫–Ω–µ–π–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏ —Å–Ω–æ–≤–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start'
    await message.answer(text, reply_markup=MainKbs.MenuMarkup)


@dp.callback_query_handler(text='GoMenu', state='*')
async def bot_start(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer(f"–ú–µ–Ω—é", reply_markup=MainKbs.MenuMarkup)
    chat = await bot.get_chat(call.from_user.id)
    mention = chat.mention
    if '@' in mention:
        await _user(call.from_user.id, mention=mention)
    else:
        await _user(call.from_user.id)

#–ü–†–û–§–ò–õ–¨
@dp.message_handler(IsPrivate(), text='–ü—Ä–æ—Ñ–∏–ª—å üíº', state='*')
async def profile(message: types.Message, state: FSMContext):
    await state.finish()
    user = await _user(message.from_user.id)
    chat = await bot.get_chat(message.from_user.id)
    rating = user[2]
    verif = user[3]
    if verif == '–ù–µ–≤–µ—Ä–∏—Ñ–∏—Ü—Ä–æ–≤–∞–Ω–Ω—ã–π':
        verif = verif + ' <a href="https://google.com">(–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è)</a>'
    if rating == 0:
        rating = '–í—ã –µ—â—ë –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–∏'
    text = f"""
üîë  <b>–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å, {chat.first_name}  </b>üîë

üí∞  <b>–ë–∞–ª–∞–Ω—Å: </b>{user[5] + '‚ÇΩ'}

üñ±  <b>–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞: </b>{rating}
üñ±  <b>–°—Ç–∞—Ç—É—Å: </b>{verif}
üñ±  <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: </b>{user[1]}
üñ±  <b>–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: </b>{user[4]}

"""
    await message.answer(text, reply_markup=MainKbs.ProfileMarkup)

#–ò–ù–§–û–†–ú–ê–¶–ò–Ø
@dp.message_handler(IsPrivate(), text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üìÑ')
async def send_info(message: types.Message):
    text = f"""
    <b>
   ‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º ‚ùì
    </b>
    ........
    <b>
  üê¶  –û –ø—Ä–æ–µ–∫—Ç–µ  üê¶
    </b>
    ........
    """
    await message.answer(text, reply_markup=MainKbs.GoMenuDMarkup)







