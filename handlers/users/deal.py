from contextlib import suppress

from aiogram import types
from aiogram.dispatcher.storage import FSMContext
from aiogram.utils.exceptions import MessageNotModified

from filters import *
from keyboards import *
from loader import bot, users_con, deal_con
from states import *
from utils.misc import other


async def search_seller(_id):
    seller = users_con.seller(_id)
    return seller


async def set_deal(deal_id, price, description, client, seller):
    deal = deal_con.set_deal(deal_id, price, description, client, seller)
    return deal


async def take_deal(_id):
    deal = deal_con.take_deal(_id)
    return deal


async def deal_status(_id, status=None):
    if status:
        status = deal_con.status(_id, status)
        return
    else:
        deal_con.status(_id)


@dp.message_handler(IsPrivate(), text='–ü–æ–∏—Å–∫ –ø—Ä–æ–¥–∞–≤—Ü–∞ üîç')
async def search_seller1(message: types.Message):
    await message.answer('üîé<b>  –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø—Ä–æ–¥–∞–≤—Ü–∞, —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å —Å–¥–µ–ª–∫—É</b>',
                         reply_markup=MainKbs.GoMenuMarkup)
    await Deal.search_user.set()


@dp.message_handler(state=Deal.search_user)
async def take_seller(message: types.Message, state: FSMContext):
    mention = message.text
    if '@' in mention:
        if len(mention) <= 30:
            pass
        else:
            await message.answer('–ù–∏–∫–Ω–µ–π–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:', reply_markup=MainKbs.GoMenuMarkup)
            await Deal.search_user.set()
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ: @ + nickname', reply_markup=MainKbs.GoMenuMarkup)
        return await Deal.search_user.set()

    try:
        seller = await search_seller(mention)
    except:
        seller = None
    if seller:
        pass
    else:
        return await message.answer(
            '‚ùå  –°–µ–ª–ª–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–µ—Ä–æ—è—Ç–Ω–æ –æ–Ω –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ, –ª–∏–±–æ —Å–º–µ–Ω–∏–ª –Ω–∏–∫–Ω–µ–π–º. –í–æ –≤—Ç–æ—Ä–æ–º —Å–ª—É—á–∞–µ –ø—É—Å—Ç—å —Å–µ–ª–ª–µ—Ä –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º—ë—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É "/start", –∏ –Ω–∏–∫–Ω–µ–π–º' +
            ' –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç—Å—è!')
    rating = seller[2]
    if rating == 0:
        rating = '–ï—â—ë –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª –Ω–∏ –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–∏'
    text = f"""
<b>‚úÖ    –ü—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–¥ –Ω–∏–∫–Ω–µ–π–º–æ–º: </b>{mention}

üëâ  <b>–†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞: </b>{rating}
üëâ  <b>–°—Ç–∞—Ç—É—Å: </b>{seller[3]}
üëâ  <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: </b>{seller[1]}
üëâ  <b>–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: </b>{seller[4]}

    –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    await state.update_data(seller=seller[0])
    await message.answer(text, reply_markup=MainKbs.SellerMarkup)


# –ù–ê–ß–ê–õ–û –°–î–ï–õ–ö–ò
@dp.callback_query_handler(text='MakeDeal', state='*')
async def make_deal(call: types.CallbackQuery, state: FSMContext):
    msg = await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏: ', reply_markup=MainKbs.InlineGoBack)
    await state.update_data(msg=msg)
    await Deal.price.set()


@dp.message_handler(state=Deal.price)
async def set_deal_desc(message: types.Message, state: FSMContext):
    data = await state.get_data()
    msg = data['msg']
    await bot.delete_message(message.from_user.id, msg.message_id)
    await bot.delete_message(message.from_user.id, message.message_id)
    if message.text.isdigit():
        msg = await message.answer(
            '–û–ø–∏—à–∏—Ç–µ —É—Å–ª–æ–≤–∞–∏—è —Å–¥–µ–ª–∫–∏ (–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏ —Ç.–ø). –≠—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏ –ø–æ–º–æ–∂–µ—Ç –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ —Å–ø–æ—Ä–∞ –ø–æ —Å–¥–µ–ª–∫–µ',
            reply_markup=MainKbs.InlineGoBack)
        await state.update_data(msg=msg, price=message.text)
        await Deal.description.set()
    else:
        bot.delete_message(message.from_user.id, msg)
        msg = await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–Ω—É—é —Å—É–º–º—É —Å–¥–µ–ª–∫–∏, –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞: ',
                                   reply_markup=MainKbs.InlineGoBack)
        await state.update_data(msg=msg)
        await Deal.price.set()


@dp.message_handler(state=Deal.description)
async def send_deal(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    data = await state.get_data()
    await bot.delete_message(message.from_user.id, data['msg'].message_id)
    await bot.delete_message(message.from_user.id, message.message_id)
    user = await bot.get_chat(message.from_user.id)
    seller = await bot.get_chat(data['seller'])
    price = data['price']
    description = message.text
    text = f"""<b>
ü§ë   –°–¥–µ–ª–∫–∞ –º–µ–∂–¥—É {seller.mention} –∏ {user.mention}</b>   ü§ë  

<b>–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏: </b>{price}
<b>–£—Å–ª–æ–≤–∏—è: </b>
{description}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    msg = await message.answer(text, reply_markup=MainKbs.SendDealMarkup)
    await state.update_data(msg=msg)


# –û–¢–ü–†–ê–í–ò–¢–¨ –°–î–ï–õ–ö–£
@dp.callback_query_handler(text='ConfirmDeal', state='*')
async def send_seller_deal(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await call.message.answer('<b>–°–¥–µ–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü—É! –í–∞–º –ø—Ä–∏–¥—ë—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –æ–Ω –µ—ë –ø—Ä–∏–º–µ—Ç ‚è±</b>')
    uniq_id = other.rand_id_to_acc()
    print(uniq_id)
    deal = await set_deal(uniq_id, data['price'], data['description'], call.from_user.id, data['seller'])
    print(deal)
    client = await bot.get_chat(deal[3])
    text = f"""
    <b>–°–¥–µ–ª–∫–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º <code>{uniq_id}</code> üí∞</b>
    
<b>‚ä≥   –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: </b>{client.mention}
<b>‚ä≥   –°—É–º–º–∞ —Å–¥–µ–ª–∫–∏: </b>{deal[1]}‚ÇΩ
<b>
‚ä≥    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –ª–∏ –≤—ã —Å–¥–µ–ª–∫—É?
</b> 
"""
    await bot.send_message(deal[4], text=text, reply_markup=MainKbs.ConfirmSellerMarkup(deal[0]))

# –ö–ù–û–ü–ö–ò –ü–†–ò–ù–Ø–¢–ò–Ø –°–î–ï–õ–ö–ò
@dp.callback_query_handler(MainKbs.confirm_callbackdata.filter(confirm=['True']), state='*')
async def seller_confirm_deal(call: types.CallbackQuery, callback_data: dict):
    deal = await take_deal(callback_data['id'])
    await deal_status(callback_data['id'], '1')
    await call.answer('‚úÖ –°–¥–µ–ª–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞')
    with suppress(MessageNotModified):
        await bot.edit_message_text('<b>' + call.message.text + '</b>', call.from_user.id, call.message.message_id)
    await bot.send_message(deal[3],
                           text=f'<b>‚úÖ  –°–¥–µ–ª–∫–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º <code>{callback_data["id"]}</code> –ø—Ä–∏–Ω—è—Ç–∞ –ø—Ä–æ–¥–∞–≤—Ü–æ–º!</b>')
@dp.callback_query_handler(MainKbs.confirm_callbackdata.filter(confirm=['False']), state='*')
async def seller_cancel_deal(call: types.CallbackQuery, callback_data: dict):
    deal = await take_deal(callback_data['id'])
    await deal_status(callback_data['id'], '4')
    await call.answer('‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Å–¥–µ–ª–∫–∏')
    with suppress(MessageNotModified):
        await bot.edit_message_text('<b>' + call.message.text + '</b>', call.from_user.id, call.message.message_id)
    await bot.send_message(deal[3],
                           text=f'<b>‚ùå  –ü—Ä–æ–¥–∞–≤–µ—Ü –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —Å–¥–µ–ª–∫–∏ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º <code>{callback_data["id"]}</code></b>')

# –ê–ö–¢–ò–í–ù–´–ï –°–î–ï–õ–ö–ò –Æ–ó–ï–†–ê
@dp.callback_query_handler(text='MyDeals', state='*')
async def my_deals(call: types.CallbackQuery):
    await call.answer('–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Å–¥–µ–ª–∫–∞–º...')

# –ö–ù–û–ü–ö–ò –û–¢–ú–ï–ù–´
@dp.callback_query_handler(text='CancelDeal', state='*')
async def cancel_deal(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await bot.delete_message(call.from_user.id, data['msg'].message_id)
@dp.callback_query_handler(text='GoBack', state='*')
async def go_back(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await bot.delete_message(call.from_user.id, data['msg'].message_id)
    seller = data['seller']
    await state.finish()
    await state.update_data(seller=seller)
