from contextlib import suppress

from aiogram import types
from aiogram.dispatcher.storage import FSMContext
from aiogram.utils.exceptions import MessageNotModified

from filters import *
from keyboards import *
from loader import bot, users_con, deal_con, feed_con
from states import *
from utils.misc import other

from data.config import LOG_CHAT, SERVICES_CHAT, MODERATORS

async def mailing_dispute(text, deal, user, seller):
    for chat in MODERATORS:
        await bot.send_message(chat, text=text, reply_markup=MainKbs.DisputeMarkup(deal, user, seller))

async def mailing_services(text):
    for chat in SERVICES_CHAT:
        await bot.send_message(chat, text=text)

async def mailing_logchat(text):
    for chat in LOG_CHAT:
        await bot.send_message(chat, text=text)

async def _user(_id, mention=None):
    user = users_con.user(_id, mention)
    return user

async def search_seller(_id):
    seller = users_con.seller(_id)
    return seller

async def set_deal(deal_id, price, description, client, seller):
    deal = deal_con.set_deal(deal_id, price, description, client, seller)
    return deal


async def take_deal(_id):
    deal = deal_con.take_deal(_id)
    return deal

async def active_deals(_id):
    return deal_con.active_deals(_id)

async def delete_deal(_id):
    deal_con.delete_deal(_id)


async def deal_status(_id, status=None):
    if status:
        status = deal_con.status(_id, status)
        return
    else:
        deal_con.status(_id)

async def update_balance(_id, amount, earned=False, minus=False):
    users_con.update_balance(_id, amount, earned, minus)

async def set_feed(deal, seller, rate):
    feed_con.add_feed(deal, seller, rate)
    rating = feed_con.calc_rating(seller)
    users_con.update_rating(seller, rating)



@dp.message_handler(IsPrivate(), text='üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–¥–∞–≤—Ü–∞', state='*')
async def search_seller1(message: types.Message, state: FSMContext):
    await state.finish()
    msg = await message.answer('üîç <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø—Ä–æ–¥–∞–≤—Ü–∞, —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Å–¥–µ–ª–∫—É</b>',
                         reply_markup=MainKbs.GoMenuMarkup)
    await state.update_data(msg=msg)
    await Deal.search_user.set()


@dp.message_handler(state=Deal.search_user)
async def take_seller(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await bot.delete_message(message.from_user.id, data['msg'].message_id)
    mention = message.text
    if '@' in mention:
        if len(mention) <= 30:
            pass
        else:
            await message.answer('–ù–∏–∫–Ω–µ–π–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:', reply_markup=MainKbs.GoMenuMarkup)
            await Deal.search_user.set()
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ: @ + nickname', reply_markup=MainKbs.GoMenuMarkup)
        return await Deal.search_user.set()

    try:
        seller = await search_seller(mention)
    except:
        seller = None
    if seller:
        pass
    else:
        return await message.answer(
            '‚ùå  –°–µ–ª–ª–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–µ—Ä–æ—è—Ç–Ω–æ –æ–Ω –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ, –ª–∏–±–æ —Å–º–µ–Ω–∏–ª –Ω–∏–∫–Ω–µ–π–º. –í–æ –≤—Ç–æ—Ä–æ–º —Å–ª—É—á–∞–µ –ø—É—Å—Ç—å —Å–µ–ª–ª–µ—Ä –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º—ë—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É "/start", –∏ –Ω–∏–∫–Ω–µ–π–º' +
            ' –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç—Å—è!')
    rating = seller[2]
    if rating == 0:
        rating = '–ï—â—ë –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª –Ω–∏ –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–∏'
    text = f"""
<b>üîç –ü—Ä–æ–¥–∞–≤–µ—Ü: </b>{mention}

üìä <b>–†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞:</b> {rating}
‚úÖ <b>–°—Ç–∞—Ç—É—Å: </b>{seller[3]}
üìÜ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: </b>{seller[1]}
üí≥ <b>–°—É–º–º–∞ —Å–¥–µ–ª–æ–∫: </b>{seller[4]}
    """
    await state.update_data(seller=seller[0])
    await message.answer(text, reply_markup=MainKbs.SellerMarkup)


# –ù–ê–ß–ê–õ–û –°–î–ï–õ–ö–ò
@dp.callback_query_handler(text='MakeDeal', state='*')
async def make_deal(call: types.CallbackQuery, state: FSMContext):
    msg = await call.message.answer("üöÄ <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏:</b>", reply_markup=MainKbs.InlineGoBack)
    await state.update_data(msg=msg)
    await Deal.price.set()


@dp.message_handler(state=Deal.price)
async def set_deal_desc(message: types.Message, state: FSMContext):
    data = await state.get_data()
    msg = data['msg']
    await bot.delete_message(message.from_user.id, msg.message_id)
    await bot.delete_message(message.from_user.id, message.message_id)
    if message.text.isdigit():
        msg = await message.answer(
            'üöÄ <b>–û–ø–∏—à–∏—Ç–µ —É—Å–ª–æ–≤–∏—è —Å–¥–µ–ª–∫–∏</b>(–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ). <b>–≠—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ</b> –∏ –ø–æ–º–æ–∂–µ—Ç –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ —Å–ø–æ—Ä–∞ –ø–æ —Å–¥–µ–ª–∫–µ.',
            reply_markup=MainKbs.InlineGoBack)
        await state.update_data(msg=msg, price=message.text)
        await Deal.description.set()
    else:
        bot.delete_message(message.from_user.id, msg)
        msg = await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–Ω—É—é —Å—É–º–º—É —Å–¥–µ–ª–∫–∏, –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞: ',
                                   reply_markup=MainKbs.InlineGoBack)
        await state.update_data(msg=msg)
        await Deal.price.set()


@dp.message_handler(state=Deal.description)
async def send_deal(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    data = await state.get_data()
    await bot.delete_message(message.from_user.id, data['msg'].message_id)
    await bot.delete_message(message.from_user.id, message.message_id)
    price = data['price']
    user = await bot.get_chat(message.from_user.id)
    seller = await bot.get_chat(data['seller'])
    description = message.text
    text = f"""<b>
ü§ë   –°–¥–µ–ª–∫–∞ –º–µ–∂–¥—É {seller.mention} –∏ {user.mention}</b>   ü§ë  

<b>–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏: </b>{price}
<b>–£—Å–ª–æ–≤–∏—è: </b>
{description}

<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>
"""
    msg = await message.answer(text, reply_markup=MainKbs.SendDealMarkup)
    await state.update_data(msg=msg)



# –û–¢–ü–†–ê–í–ò–¢–¨ –°–î–ï–õ–ö–£
@dp.callback_query_handler(text='ConfirmDeal', state='*')
async def send_seller_deal(call: types.CallbackQuery, state: FSMContext):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    uniq_id = other.rand_id_to_acc()
    data = await state.get_data()
    balance = await _user(call.from_user.id)
    deal = await set_deal(uniq_id, data['price'], data['description'], call.from_user.id, data['seller'])
    if int(balance[5]) >= int(deal[1]):
        try: await update_balance(call.from_user.id, int(deal[1]), minus=True)
        except: return await call.answer('‚ùå –û—à–∏–±–∫–∞ ‚ùå')
        await call.message.answer('üöÄ <b>–ó–∞–ø—Ä–æ—Å –æ –Ω–∞—á–∞–ª–µ —Å–¥–µ–ª–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–æ–¥–∞–≤—Ü—É</b>')
        client = await bot.get_chat(deal[3])
        text = f"""
üöÄ <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å–ª–æ–≤–∏—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞—á–∞–ª–æ —Å–¥–µ–ª–∫–∏</b>

üí∏ <b>–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏:</b> {deal[1]}RUB
üìù <b>–£—Å–ª–æ–≤–∏—è:</b>
{deal[2]}
"""
        await bot.send_message(deal[4], text=text, reply_markup=MainKbs.ConfirmSellerMarkup(deal[0]))
        await state.finish()
    else:
        await delete_deal(deal[0])
        await call.message.answer("<b>‚ùå  –ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –ø—Ä–æ—Ñ–∏–ª—å  ‚ùå</b>")

# –ö–ù–û–ü–ö–ò –ü–†–ò–ù–Ø–¢–ò–Ø –°–î–ï–õ–ö–ò
@dp.callback_query_handler(MainKbs.confirm_callbackdata.filter(confirm=['True']), state='*')
async def seller_confirm_deal(call: types.CallbackQuery, callback_data: dict):
    deal = await take_deal(callback_data['id'])
    await deal_status(callback_data['id'], '1')
    await call.answer('‚úÖ –°–¥–µ–ª–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞')
    with suppress(MessageNotModified):
        await bot.edit_message_text('<b>' + call.message.text + '</b>', call.from_user.id, call.message.message_id)
    await bot.send_message(deal[3],
                           text=f'‚úÖ <b>–°–¥–µ–ª–∫–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º</b> <code>{deal[0]}</code> <b>–ø—Ä–∏–Ω—è—Ç–∞ –ø—Ä–æ–¥–∞–≤—Ü–æ–º!</b>')
    user = await _user(deal[3])
    seller = await _user(deal[4])
    text=f""" 
<b>‚ôªÔ∏è –ú–µ–∂–¥—É {user[6]} –∏ {seller[6]} –Ω–∞—á–∞–ª–∞—Å—å —Å–¥–µ–ª–∫–∞ !Ô∏è ‚ôªÔ∏è
–ê–π–¥–∏ —Å–¥–µ–ª–∫–∏: <code>{deal[0]}</code>
–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏: <code>{deal[1]}</code>‚ÇΩ
</b>
"""
    await mailing_services(text)

@dp.callback_query_handler(MainKbs.confirm_callbackdata.filter(confirm=['False']), state='*')
async def seller_cancel_deal(call: types.CallbackQuery, callback_data: dict):
    deal = await take_deal(callback_data['id'])
    await deal_status(callback_data['id'], '4')
    await update_balance(deal[3], deal[1])
    await call.answer('‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Å–¥–µ–ª–∫–∏')
    with suppress(MessageNotModified):
        await bot.edit_message_text('<b>' + call.message.text + '</b>', call.from_user.id, call.message.message_id)
    await bot.send_message(deal[3],
                           text=f'<b>‚ùå  –ü—Ä–æ–¥–∞–≤–µ—Ü –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —Å–¥–µ–ª–∫–∏ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º <code>{callback_data["id"]}</code></b>')

# –ê–ö–¢–ò–í–ù–´–ï –°–î–ï–õ–ö–ò –Æ–ó–ï–†–ê
@dp.message_handler(text='ü§ù –°–¥–µ–ª–∫–∏', state='*')
async def my_deals(message: types.Message):
    await message.answer('–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Å–¥–µ–ª–∫–∞–º...')
    deals = await active_deals(message.from_user.id)
    for a in deals[0]:
        seller = await bot.get_chat(a[4])
        user = await bot.get_chat(a[3])
        text = f"""
üöÄ <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å–ª–æ–≤–∏—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞—á–∞–ª–æ —Å–¥–µ–ª–∫–∏</b>

üí∏ <b>–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏:</b> {a[1]}RUB
üìù <b>–£—Å–ª–æ–≤–∏—è:</b>
{a[2]}
</b> 
"""
        await message.answer(text=text, reply_markup=MainKbs.ConfirmSellerMarkup(a[0]))
    deals = await active_deals(message.from_user.id)
    for a in deals[1]:
        seller = await bot.get_chat(a[4])
        user = await bot.get_chat(a[3])
        text = f"""<b>
ü§ë   –°–¥–µ–ª–∫–∞ –º–µ–∂–¥—É {seller.mention} –∏ {user.mention}</b>   ü§ë  

<b>–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏: </b>{a[1]}
<b>–£—Å–ª–æ–≤–∏—è: </b>
{a[2]}

<b>–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–∫–∞ –ø—Ä–æ–¥–∞–≤–µ—Ü –ø—Ä–∏–º–µ—Ç –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç –≤–∞—à—É —Å–¥–µ–ª–∫—É</b>
"""
        await message.answer(text)
    deals = await active_deals(message.from_user.id)
    for a in deals[2]:
        seller = await bot.get_chat(a[4])
        user = await bot.get_chat(a[3])
        text = f"""
ü§ù <b>–°–¥–µ–ª–∫–∞ {a[0]}</b>

üë®‚Äçüíº <b>–ü—Ä–æ–¥–∞–≤–µ—Ü: {seller.mention}</b>
üíÅ‚Äç‚ôÇ <b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {user.mention}</b>

üí∏ <b>–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏:</b> {a[1]}
üìù <b>–£—Å–ª–æ–≤–∏—è:</b>
{a[2]}
"""
        await message.answer(text=text, reply_markup=MainKbs.BuyDealsMarkup(a[0]))
    deals = await active_deals(message.from_user.id)
    for a in deals[3]:
        seller = await bot.get_chat(a[4])
        user = await bot.get_chat(a[3])
        text = f"""
<b>–°–¥–µ–ª–∫–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º <code>{a[0]}</code> üí∞</b>
    
<b>‚ä≥   –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: </b>{user.mention}
<b>‚ä≥   –°—É–º–º–∞ —Å–¥–µ–ª–∫–∏: </b>{a[1]}‚ÇΩ
<b>‚ä≥   –£—Å–ª–æ–≤–∏—è —Å–¥–µ–ª–∫–∏:</b>
{a[2]}
<b>
‚ä≥    –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
</b> 
"""
        await message.answer(text=text, reply_markup=MainKbs.SellDealsMarkup(a[0]))

# –û–¢–ü–†–ê–í–ò–¢–¨, –í–ï–†–ù–£–¢–¨ –î–ï–ù–¨–ì–ò –ò–õ–ò –û–¢–ö–†–´–¢–¨ –°–ü–û–† –ü–û –°–î–ï–õ–ö–ï
@dp.callback_query_handler(MainKbs.buydeals_callback_data.filter(send_money='True'), state='*')
async def buydeals_sendmoney(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    msg = await call.message.answer('<b>‚úåÔ∏è–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞–ø–∏—Å–∞–≤ —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ 10: </b>')
    await Feed.rate.set()
    await state.update_data(deal=callback_data['_id'], send=callback_data['send_money'], msg=msg)
    with suppress(MessageNotModified):
        await bot.edit_message_text('<b>' + call.message.text + '</b>', call.from_user.id, call.message.message_id)

@dp.message_handler(state=Feed.rate)
async def set_rate(message: types.Message, state: FSMContext):
    data = await state.get_data()
    try: await bot.delete_message(message.from_user.id, data['msg'].message_id)
    except: pass
    try: rate = int(message.text)
    except:
        await message.answer('<b>‚úåÔ∏è–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞–ø–∏—Å–∞–≤ —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ 10: </b>')
        return await Feed.rate.set()
    if (rate > 10) and (rate < 1):
        await message.answer('<b>‚úåÔ∏è–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞–ø–∏—Å–∞–≤ —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ 10: </b>')
        return await Feed.rate.set()
    await state.update_data(rate=rate)
    text = '<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∏ –¥–µ–Ω—å–≥–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –∞ —Å–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞</b>'
    await message.answer(text, reply_markup=MainKbs.ConfirmBuydeals)


@dp.callback_query_handler(MainKbs.selldeals_callback_data.filter(dispute='False'), state='*')
async def selldeals_returnmoney(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    text = '<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∏ –¥–µ–Ω—å–≥–∏ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã, –∞ —Å–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞</b>'
    await call.message.answer(text, reply_markup=MainKbs.ConfirmReturnMoney)
    await state.update_data(deal=callback_data['_id'], dispute=callback_data['dispute'])
    with suppress(MessageNotModified):
        await bot.edit_message_text('<b>' + call.message.text + '</b>', call.from_user.id, call.message.message_id)

@dp.callback_query_handler(MainKbs.selldeals_callback_data.filter(dispute='True'), state='*')
async def selldeals_dispute(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    text= '<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏ —Å–¥–µ–ª–∫–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Ä–µ–∂–∏–º –∞—Ä–±–∏—Ç—Ä–∞–∂–∞</b>'
    await call.message.answer(text, reply_markup=MainKbs.ConfirmDispute)
    await state.update_data(deal=callback_data['_id'], send='seller')
    with suppress(MessageNotModified):
        await bot.edit_message_text('<b>' + call.message.text + '</b>', call.from_user.id, call.message.message_id)

@dp.callback_query_handler(MainKbs.buydeals_callback_data.filter(send_money='False'), state='*')
async def selldeals_dispute(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    text= '<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏ —Å–¥–µ–ª–∫–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Ä–µ–∂–∏–º –∞—Ä–±–∏—Ç—Ä–∞–∂–∞</b>'
    await call.message.answer(text, reply_markup=MainKbs.ConfirmDispute)
    await state.update_data(deal=callback_data['_id'], send='user')
    with suppress(MessageNotModified):
        await bot.edit_message_text('<b>' + call.message.text + '</b>', call.from_user.id, call.message.message_id)

# –ö–ù–û–ü–ö–ò –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø –î–ï–ô–°–¢–í–ò–ô
@dp.callback_query_handler(text='ConfirmDispute', state='*')
async def ConfirmDispute(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    deal = await take_deal(data['deal'])
    if data['send'] == 'user':
        user = await _user(deal[3])
        seller = await _user(deal[4])
        await call.message.answer('<b>–°–¥–µ–ª–∫–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Ä–µ–∂–∏–º –∞—Ä–±–∏—Ç—Ä–∞–∂–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...</b>')
        await bot.send_message(deal[4],
                               f'<b>‚ùï  –ü–æ–∫—É–ø–∞—Ç–µ–ª—å —Å–¥–µ–ª–∫–∏ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º <code>{deal[0]}</code> —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–µ—Ä–µ–≤—ë–ª —Å–¥–µ–ª–∫—É –≤ —Ä–µ–∂–∏–º –∞—Ä–±–∏—Ç—Ä–∞–∂–∞, –æ–∂–∏–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!  ‚ùï</b>')
        await deal_status(deal[0], 3)
        text1 = f"""<b>
üõë  –°–ø–æ—Ä –º–µ–∂–¥—É –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º {user[6]} –∏ —Å–µ–ª–ª–µ—Ä–æ–º {seller[6]}  üõë 

–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏: {deal[1]}‚ÇΩ
–£—Å–ª–æ–≤–∏—è —Å–¥–µ–ª–∫–∏: 
{deal[2]}
</b>
            """
        await mailing_dispute(text1, deal[0], user[0], seller[0])
    else:
        user = await _user(deal[3])
        seller = await _user(deal[4])
        await call.message.answer('<b>–°–¥–µ–ª–∫–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Ä–µ–∂–∏–º –∞—Ä–±–∏—Ç—Ä–∞–∂–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...</b>')
        await bot.send_message(deal[3],
                               '<b>‚ùï  –ü—Ä–æ–¥–∞–≤–µ—Ü —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–µ—Ä–µ–≤—ë–ª —Å–¥–µ–ª–∫—É –≤ —Ä–µ–∂–∏–º –∞—Ä–±–∏—Ç—Ä–∞–∂–∞, –æ–∂–∏–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!  ‚ùï</b>')
        await deal_status(deal[0], 3)
        text1 = f"""<b>
üõë  –°–ø–æ—Ä –º–µ–∂–¥—É –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º {user[6]} –∏ —Å–µ–ª–ª–µ—Ä–æ–º {seller[6]}  üõë 

–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏: {deal[1]}‚ÇΩ
–£—Å–ª–æ–≤–∏—è —Å–¥–µ–ª–∫–∏: 
{deal[2]}
</b>
"""
        await mailing_dispute(text1, deal[0], user[0], seller[0])




@dp.callback_query_handler(text='ConfirmBuydeals', state='*')
async def confirm_send_money(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    deal = await take_deal(data['deal'])
    if deal[5] == 1:
        if data['send'] == 'True':
            await set_feed(deal[0], deal[4], data['rate'])
            await update_balance(deal[4], deal[1], earned=True)
            await deal_status(deal[0], 2)
            await bot.delete_message(call.from_user.id, call.message.message_id)
            await call.answer('‚úÖ –î–µ–Ω—å–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã')
            user = await _user(deal[3])
            seller = await _user(deal[4])
            text =f"""<b>
ü•≥       –°–¥–µ–ª–∫–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º <code>{deal[0]}</code> –∑–∞–≤–µ—Ä—à–µ–Ω–∞!     ü•≥
ü•≥       –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –ø–æ—Å—Ç—É–ø–∏–ª–æ <code>{deal[1]}</code>‚ÇΩ             ü•≥     
            
            </b>
            """
            await bot.send_message(text=text, chat_id=deal[4])
            text1 = f""" 
            <b>‚ôª {user[6]} –∏ {seller[6]} —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Å–¥–µ–ª–∫—É! ‚ôªÔ∏è
–ê–π–¥–∏ —Å–¥–µ–ª–∫–∏: <code>{deal[0]}</code>
–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏: <code>{deal[1]}</code>‚ÇΩ
            </b>
            """
            await mailing_services(text1)
            await call.message.answer('<b>–°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –¥–µ–Ω—å–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–¥–∞–≤—Ü—É!</b>')
            #await call.message.answer('–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –ø—Ä–æ–¥–∞–≤—Ü—É!', reply_markup=MainKbs.FeedBackMarkup(deal[4]))

    else:
        return await call.message.answer('<b>–î–µ–Ω—å–≥–∏ –∑–∞ –¥–∞–Ω–Ω—É—é —Å–¥–µ–ª–∫—É —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã ‚úå</b>')


@dp.callback_query_handler(text='ConfirmReturnMoney', state='*')
async def confirm_return_money(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    deal = await take_deal(data['deal'])
    if deal[5] == 1:
        if data['dispute'] == 'False':
            await update_balance(deal[3], deal[1])
            await deal_status(deal[0], 2)
            await bot.delete_message(call.from_user.id, call.message.message_id)
            await call.answer('‚úÖ –î–µ–Ω—å–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã')
            text = f"""<b>
‚ôªÔ∏è–î–µ–Ω—å–≥–∏ –∑–∞ —Å–¥–µ–ª–∫—É –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º <code>{deal[0]}</code> –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø—Ä–æ–¥–∞–≤—Ü–æ–º!
‚ôªÔ∏è–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –ø–æ—Å—Ç—É–ø–∏–ª–æ <code>{deal[1]}</code>‚ÇΩ

                        </b>
                        """
            await bot.send_message(text=text, chat_id=deal[3])
    else:
        return await call.message.answer('<b>–î–µ–Ω—å–≥–∏ –∑–∞ –¥–∞–Ω–Ω—É—é —Å–¥–µ–ª–∫—É —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã ‚úå</b>')


# –ö–ù–û–ü–ö–ò –°–ü–û–†–ê –ú–û–î–ï–†–ê–¢–û–†–ê
@dp.callback_query_handler(MainKbs.dispute_callbackdata.filter(), state='*')
async def dispute_buttons(call: types.CallbackQuery, callback_data: dict):
    await call.answer('‚úÖ –î–µ–Ω—å–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã')
    await bot.edit_message_text(chat_id=call.from_user.id, text=call.message.text, message_id=call.message.message_id)
    deal = await take_deal(callback_data['deal'])
    earned = False
    if str(callback_data['won']) == str(deal[4]):
        earned = True
    await update_balance(callback_data['won'], deal[1], earned=earned)
    await bot.send_message(callback_data['won'], text='<b>ü•≥  –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ —Å–ø–æ—Ä, –¥–µ–Ω—å–≥–∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å!  ü•≥</b>')
    await deal_status(deal[0], 4)

# –ö–ù–û–ü–ö–ò –û–¢–ú–ï–ù–´
@dp.callback_query_handler(text='CancelDeal', state='*')
async def cancel_deal(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await bot.delete_message(call.from_user.id, data['msg'].message_id)
@dp.callback_query_handler(text='GoBack', state='*')
async def go_back(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await bot.delete_message(call.from_user.id, data['msg'].message_id)
    seller = data['seller']
    await state.finish()
    await state.update_data(seller=seller)

@dp.callback_query_handler(text='Reviews', state='*')
async def Reviews(call: types.CallbackQuery, state: FSMContext):
    await call.answer('‚è± –û—Ç–∑—ã–≤—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã')

@dp.callback_query_handler(text='Referal', state='*')
async def Reviews(call: types.CallbackQuery, state: FSMContext):
    await call.answer('‚ùï –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')




