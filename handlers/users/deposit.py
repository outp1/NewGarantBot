from contextlib import suppress

from aiogram import types
from loader import dp, bot
from utils.banker import Banker
from keyboards import MainKbs
from states.states import Payment, Withdraw
from aiogram.dispatcher.storage import FSMContext
from typing import Union
from utils.qiwi import Qiwi, check_bill
from data.config import qiwi, banker, LOG_CHAT, WITHDRAW_CHAT
from loader import deal_con, users_con, w_con
from utils.misc import other
from aiogram.utils.exceptions import MessageNotModified
from utils.p2p import QiwiP2P

data_qiwi = qiwi()
data_banker = banker()


btc = Banker(data_banker[0], data_banker[1], data_banker[2], data_banker[3])
qiwi = Qiwi(data_qiwi[0], data_qiwi[1], data_qiwi[2])

async def mailing_logchat(text):
    for chat in LOG_CHAT:
        await bot.send_message(chat, text=text)

async def _user(_id, mention=None):
    user = users_con.user(_id, mention)
    return user

async def update_balance(_id, amount, earned=False, minus=False):
    users_con.update_balance(_id, amount, earned, minus)

async def add_withdraw(_id, user_id, amount, method, req):
    w = w_con.add_withdraw(_id, user_id, amount, method, req)
    return w

async def rand_id():
    return other.rand_id_to_acc()

async def mailing_withdraw(text, reply):
    for chat in WITHDRAW_CHAT:
        await bot.send_message(text=text, chat_id=chat, reply_markup=reply)

async def update_withdraw(_id, status):
    w_con.update_withdraw(_id, status)

async def take_withdraw(_id):
    return w_con.take_withdraw(_id)

@dp.callback_query_handler(text='cancel_qiwi', state='*')
@dp.callback_query_handler(text='ReplenishBalance', state='*')
async def choose_method(call: types.CallbackQuery, state: FSMContext):
    msg = await call.message.answer('<b>‚ôªÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: </b>', reply_markup=MainKbs.ChooseMethod)
    await state.update_data(msg=msg)

@dp.callback_query_handler(text='qiwi', state='*')
async def qiwi_amount(call: types.CallbackQuery, state: FSMContext):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    msg = await call.message.answer('<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>', reply_markup=MainKbs.QiwiCancel)
    await state.update_data(msg=msg)
    await Payment.amount.set()

@dp.message_handler(state=Payment.amount)
async def qiwi_method(message: types.Message, state: FSMContext):
    amount = message.text
    comment = other.rand_id_to_acc()
    try:
        bill = await qiwi.create_bill(int(amount), comment)
    except (ValueError, TypeError):
        msg = await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞:', reply_markup=MainKbs.QiwiCancel)
        await state.update_data(msg=msg)
        return await Payment.amount.set()
    data = await state.get_data()
    await bot.delete_message(message.from_user.id, data['msg'].message_id)
    href = f'<a href="{bill}">–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</a>'
    text = f"""
<b>ü•ù –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ Qiwi –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞ —Å—É–º–º—É <code>{amount}‚ÇΩ</code>
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!
</b>
{href}
    """
    await message.answer(text, reply_markup=MainKbs.QiwiMethod)

    await state.update_data(amount=amount, comment=comment)


@dp.callback_query_handler(text='check_qiwi', state='*')
async def check_payment_qiwi(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    print(data)
    status = await check_bill(data['amount'], data['comment'])
    print(status)
    if status:
        await update_balance(call.from_user.id, amount=data['amount'])
        await call.answer('‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω')
        await bot.delete_message(call.from_user.id, call.message.message_id)
        text = f"""<b>
‚ôªÔ∏è–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {data['amount']}‚ÇΩ  ‚ôªÔ∏è
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {call.from_user.mention}
–°–ø–æ—Å–æ–±: Qiwi
</b>
"""
        await mailing_logchat(text=text)
    else:
        await call.answer('–û–ø–ª–∞—Ç–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞')

@dp.callback_query_handler(text='banker', state='*')
async def banker_cheque(call: types.CallbackQuery, state: FSMContext):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    msg = await call.message.answer('<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –∏–∑ @BTC_CHANGE_BOT –Ω–∞ –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>', reply_markup=MainKbs.QiwiCancel)
    await state.update_data(msg=msg)
    await Payment.banker.set()

@dp.message_handler(state=Payment.banker)
async def check_cheque(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await bot.delete_message(message.from_user.id, data['msg'].message_id)
    cheque = message.text.split('=')[1]
    amount = await btc.check_cheque(cheque)
    """except:
        msg = await message.answer('‚ùå –û—à–∏–±–∫–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–µ–æ–±–Ω–∞–ª–∏—á–µ–Ω–Ω—ã–π —á–µ–∫:')
        await Payment.banker.set()
        await state.update_data(msg=msg)
        """
    if amount:
        await update_balance(message.from_user.id, int(amount))
        await message.answer(f'<b>‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω</b>')
        text = f"""<b>
‚ôªÔ∏è–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {int(amount)}‚ÇΩ  ‚ôªÔ∏è
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.mention}
–°–ø–æ—Å–æ–±: Banker
        </b>
        """
        await mailing_logchat(text=text)
    else:
        msg = await message.answer('‚ùå –û—à–∏–±–∫–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–µ–æ–±–Ω–∞–ª–∏—á–µ–Ω–Ω—ã–π —á–µ–∫:')
        await Payment.banker.set()
        await state.update_data(msg=msg)

# –í–´–í–û–î –î–ï–ù–ï–ì
@dp.callback_query_handler(text=['Withdraw', 'BackWMarkup'], state='*')
async def ad(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.answer('<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞: </b>', reply_markup=MainKbs.WithdrawChoose)

@dp.callback_query_handler(text='w_qiwi', state='*')
async def w_qiwi(call: types.CallbackQuery, state: FSMContext):
    msg = await call.message.answer('<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞: </b>', reply_markup=MainKbs.BackWMarkup)
    await state.update_data(msg=msg)
    await Withdraw.amount.set()

@dp.message_handler(state=Withdraw.amount)
async def qiwi_req(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await bot.delete_message(message.from_user.id, data['msg'].message_id)
    user = await _user(message.from_user.id)
    try: amount = int(message.text)
    except:
        msg = await message.answer('<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤—ã–≤–æ–¥–∞: </b>', reply_markup=MainKbs.BackWMarkup)
        await state.update_data(msg=msg)
        return await Withdraw.amount.set()
    if amount < 100:
        msg = await message.answer('<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —ç—Ç–∏–º —Å–ø–æ—Å–æ–±–æ–º —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 100RUB, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—É–º–º—É: </b>', reply_markup=MainKbs.BackWMarkup)
        await state.update_data(msg=msg)
        return await Withdraw.amount.set()
    if amount > int(user[5]):
        msg = await message.answer('<b>–ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤—ã–≤–æ–¥–∞: </b>', reply_markup=MainKbs.BackWMarkup)
        await state.update_data(msg=msg)
        return await Withdraw.amount.set()
    msg = await message.answer('<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–∏–≤–∏ –∫–æ—à–µ–ª—å–∫–∞: </b>', reply_markup=MainKbs.BackWMarkup)
    await state.update_data(amount=amount, msg=msg)
    await Withdraw.req.set()

@dp.message_handler(state=Withdraw.req)
async def set_w_qiwi(message: types.Message, state: FSMContext):
    req = message.text
    data = await state.get_data()
    await bot.delete_message(message.from_user.id, data['msg'].message_id)
    amount = data['amount']
    text=f"""<b>
‚ôª   –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ <code>{amount}‚ÇΩ</code>  
‚ôª   –†–µ–∫–≤–∏–∑–∏—Ç—ã: <code>{req}</code>

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É: </b>
"""
    await state.update_data(req=req)
    await message.answer(text=text, reply_markup=MainKbs.ConfirmQiwiW)

@dp.callback_query_handler(text='ConfirmQiwiW', state='*')
async def ConfirmQiwiW(call: types.CallbackQuery, state: FSMContext):
    with suppress(MessageNotModified):
        await bot.edit_message_text(call.message.text, call.from_user.id, call.message.message_id)
    data = await state.get_data()
    uniq_id = await rand_id()
    w = await add_withdraw(uniq_id, call.from_user.id, data['amount'], 'qiwi', data['req'])
    #except: return await call.message.answer('–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
    user = await bot.get_chat(w[1])
    text=f"""<b>
‚ôª –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º: <code>{w[0]}</code> ‚ôªÔ∏è
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.mention}
–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {w[2]}‚ÇΩ
–°–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞: {w[4]}
–†–µ–∫–≤–∏–∑–∏—Ç—ã: {w[3]}

</b>
"""
    await update_balance(call.from_user.id, amount=w[2], minus=True)
    await mailing_withdraw(text=text, reply=MainKbs.WAdminMarkup(w[0]))
    await call.message.answer(text='<b>‚è± –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ —Å–≤–æ–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ </b>')

@dp.callback_query_handler(MainKbs.w_admin_callbackdata.filter(wtodo='confirm'))
async def adm_confirm_w(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    text = call.message.text + '\n\n –î–ï–ù–¨–ì–ò –í–´–í–ï–î–ï–ù–´'
    w = await take_withdraw(callback_data['w'])
    user = await bot.get_chat(w[1])
    with suppress(MessageNotModified):
        await bot.edit_message_text(call.message.text, call.message.sender_chat.id, call.message.message_id)
    await bot.send_message(w[1], text=f'<b>‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º <code>{w[0]}</code> —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! </b>')
    await update_withdraw(w[0], 1)
    text = f"""<b> 
‚ôª   {user.mention} —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤—ã–≤–µ–ª <code>{w[2]}‚ÇΩ</code> –∏–∑ –±–æ—Ç–∞!
</b>
"""
    await mailing_logchat(text=text)

@dp.callback_query_handler(MainKbs.w_admin_callbackdata.filter(wtodo='replsih'))
async def adm_replish_w(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    text = call.message.text + '\n\n –î–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã'
    w = await take_withdraw(callback_data['w'])
    user = await bot.get_chat(w[1])
    with suppress(MessageNotModified):
        await bot.edit_message_text(text, call.message.sender_chat.id, call.message.message_id)
    await update_balance(w[1], w[2])
    await update_withdraw(w[0], 2)
    await bot.send_message(w[1], text=f'–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ {w[2]}‚ÇΩ, –≤—ã–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')

@dp.callback_query_handler(MainKbs.w_admin_callbackdata.filter(wtodo='ban'))
async def adm_replish_w(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    text = call.message.text + '\n\n –í–´–í–û–î –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù –ë–ï–ó –í–û–ó–í–†–ê–¢–ê –°–†–ï–î–°–¢–í'
    w = await take_withdraw(callback_data['w'])
    user = await bot.get_chat(w[1])
    with suppress(MessageNotModified):
        await bot.edit_message_text(text, call.message.sender_chat.id, call.message.message_id)
    await update_withdraw(w[0], 3)

@dp.callback_query_handler(text='w_banker', state='*')
async def w_banker(call: types.CallbackQuery, state: FSMContext):
    msg = await call.message.answer('<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞: </b>', reply_markup=MainKbs.BackWMarkup)
    await state.update_data(msg=msg)
    await Withdraw.banker.set()

@dp.message_handler(state=Withdraw.banker)
async def qiwi_req(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await bot.delete_message(message.from_user.id, data['msg'].message_id)
    try: amount = int(message.text)
    except:
        msg = await message.answer('<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤—ã–≤–æ–¥–∞: </b>', reply_markup=MainKbs.BackWMarkup)
        await state.update_data(msg=msg)
        return await Withdraw.banker.set()
    if amount < 100:
        msg = await message.answer('<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —ç—Ç–∏–º —Å–ø–æ—Å–æ–±–æ–º —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 100RUB, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—É–º–º—É: </b>',
                                   reply_markup=MainKbs.BackWMarkup)
        await state.update_data(msg=msg)
        return await Withdraw.amount.set()
    if amount > int(user[5]):
        msg = await message.answer('<b>–ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤—ã–≤–æ–¥–∞: </b>',
                                   reply_markup=MainKbs.BackWMarkup)
        await state.update_data(msg=msg)
        return await Withdraw.amount.set()
    await state.update_data(amount=amount)
    await message.answer(f'<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {amount}‚ÇΩ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞</b>', reply_markup=MainKbs.ConfirmBankerW)

@dp.callback_query_handler(text='ConfirmBankerW', state='*')
async def ConfirmBankerW(call: types.CallbackQuery, state: FSMContext):
    with suppress(MessageNotModified):
        await bot.edit_message_text(call.message.text, call.from_user.id, call.message.message_id)
    data = await state.get_data()
    uniq_id = await rand_id()
    w = await add_withdraw(uniq_id, call.from_user.id, data['amount'], 'banker', call.from_user.id)
    # except: return await call.message.answer('–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
    user = await bot.get_chat(w[1])
    text = f"""<b>
‚ôª –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º: <code>{w[0]}</code> ‚ôªÔ∏è
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.mention}
–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {w[2]}‚ÇΩ
–°–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞: {w[4]}
    </b>
    """
    await update_balance(call.from_user.id, amount=w[2], minus=True)
    await mailing_withdraw(text=text, reply=MainKbs.BankerAdminMarkup(w[0]))
    await call.message.answer(text='<b>‚è± –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–∫–∞ –≤–∞–º –ø—Ä–∏—à–ª—é—Ç —á–µ–∫</b>')


@dp.callback_query_handler(MainKbs.banker_admin_callbackdata.filter(wtodo='confirm'))
async def adm_confirm_w(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    text = call.message.text + '\n\n –î–ï–ù–¨–ì–ò –í–´–í–ï–î–ï–ù–´'
    w = await take_withdraw(callback_data['w'])
    user = await bot.get_chat(w[1])
    with suppress(MessageNotModified):
        await bot.edit_message_text(call.message.text, call.message.sender_chat.id, call.message.message_id)
    await bot.send_message(w[1], text=f'<b>‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º <code>{w[0]}</code> —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!</b>')
    await update_withdraw(w[0], 1)
    text = f"""<b> 
‚ôª   {user.mention} —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤—ã–≤–µ–ª <code>{w[2]}‚ÇΩ</code> –∏–∑ –±–æ—Ç–∞!
</b>
"""
    await mailing_logchat(text=text)

@dp.callback_query_handler(MainKbs.banker_admin_callbackdata.filter(wtodo='replish'))
async def adm_replish_w(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    print('a')
    text = call.message.text + '\n\n –î–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã'
    w = await take_withdraw(callback_data['w'])
    user = await bot.get_chat(w[1])
    with suppress(MessageNotModified):
        await bot.edit_message_text(text, call.message.sender_chat.id, call.message.message_id)
    await update_balance(w[1], w[2])
    await update_withdraw(w[0], 2)
    await bot.send_message(w[1], text=f'<b>–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ {w[2]}‚ÇΩ, –≤—ã–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>')

@dp.callback_query_handler(MainKbs.banker_admin_callbackdata.filter(wtodo='ban'))
async def adm_replish_w(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    text = call.message.text + '\n\n –í–´–í–û–î –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù –ë–ï–ó –í–û–ó–í–†–ê–¢–ê –°–†–ï–î–°–¢–í'
    w = await take_withdraw(callback_data['w'])
    user = await bot.get_chat(w[1])
    with suppress(MessageNotModified):
        await bot.edit_message_text(text, call.message.sender_chat.id, call.message.message_id)
    await update_withdraw(w[0], 3)

@dp.callback_query_handler(text=['youmoney', 'chatex', 'card'], state='*')
async def no_working(call: types.CallbackQuery, state: FSMContext):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await call.message.answer('‚ùå <b>–î–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã, –≤—Ä–µ–º–µ–Ω–Ω–æ, –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω</b>')


'''
@dp.callback_query_handler(text='card', state='*')
async def p2p_amount(call: types.CallbackQuery, state: FSMContext):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    msg = await call.message.answer('<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>', reply_markup=MainKbs.QiwiCancel)
    await state.update_data(msg=msg)
    await Payment.p2p_amount.set()

@dp.message_handler(state=Payment.p2p_amount)
async def p2p(message: types.Message, state: FSMContext):
    amount = message.text
    comment = other.rand_id_to_acc()

    bill = await qiwi_p2p.generate_bill(int(amount), comment)
    except (ValueError, TypeError):
        msg = await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞:', reply_markup=MainKbs.QiwiCancel)
        await state.update_data(msg=msg)
        return await Payment.p2p_amount.set()
    data = await state.get_data()
    await bot.delete_message(message.from_user.id, data['msg'].message_id)
    href = f'<a href="{bill}">–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</a>'
    text = f"""
<b>ü•ù –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞ —Å—É–º–º—É <code>{amount}‚ÇΩ</code>
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!
</b>
{href}
    """
    msg = await message.answer(text, reply_markup=MainKbs.QiwiMethod)

    await state.update_data(amount=amount, comment=comment, msg=msg)

@dp.callback_query_handler(text='check_p2p', state='*')
async def check_payment_p2p(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    print(data)
    status = await qiwi_p2p.is_bill_payed(data['comment'])
    print(status)
    if status:
        await update_balance(call.from_user.id, amount=data['amount'])
        await call.answer('‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω')
        await bot.delete_message(call.from_user.id, call.message.message_id)
        text = f"""<b>
‚ôªÔ∏è–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {data['amount']}‚ÇΩ  ‚ôªÔ∏è
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {call.from_user.mention}
–°–ø–æ—Å–æ–±: CardP2P
</b>
"""
        await mailing_logchat(text=text)
    else:
        await call.answer('–û–ø–ª–∞—Ç–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞')

@dp.callback_query_handler(text='cancel_p2p', state='*')
async def reject_bill(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    qiwi_p2p.reject_bill(data['comment'])
    await bot.delete_message(call.from_user.id, data['msg'].message_id)
   '''















